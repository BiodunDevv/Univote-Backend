openapi: 3.0.3
info:
  title: Univote - University Voting System API
  description: |
    Complete API documentation for Univote, a secure university voting system with facial recognition, geofencing, and email notifications.

    ## Features
    - üîê JWT-based authentication for students and admins
    - üë§ Azure Face API facial verification
    - üìç Geofencing validation (Bowen University campus)
    - üìß Automated email notifications (welcome, vote confirmation, results)
    - üó≥Ô∏è Real-time voting with eligibility checks
    - üìä Comprehensive analytics and reporting
    - üîí Single session enforcement
    - üìù Audit logging for all critical operations

    ## Authentication Flow
    1. **First Login**: Use default password '1234' to get `first_login` token
    2. **Change Password**: Use first_login token to set new password (triggers welcome email)
    3. **Regular Login**: Login with new password to get `student` token
    4. **Access Protected Routes**: Use student/admin token in Authorization header

    ## Rate Limits
    - Authentication endpoints: 5 requests per 15 minutes
    - Voting endpoints: 10 requests per minute
    - Face API endpoints: 20 requests per minute
    - General API: 100 requests per 15 minutes

    ## Security
    - Passwords hashed with bcrypt (10 rounds)
    - JWT tokens expire after 24 hours
    - Single active session per user
    - Geofencing: 5000m radius from Bowen University (7.8525, 4.2811)

  version: 1.0.0
  contact:
    email: muhammedabiodun42@gmail.com
  license:
    name: ISC

servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://univote-api.bowen.edu.ng/api
    description: Production server (example)

tags:
  - name: Authentication
    description: Student and admin authentication endpoints
  - name: Admin - Students
    description: Student management operations (admin only)
  - name: Admin - Sessions
    description: Voting session management (admin only)
  - name: Admin - System
    description: System-level operations (super admin only)
  - name: Student - Sessions
    description: View available voting sessions
  - name: Student - Voting
    description: Submit votes and view history
  - name: Results
    description: Election results and statistics

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login endpoints. 
        Token types: 'student', 'admin', 'first_login'

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message description"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Student:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        matric_no:
          type: string
          example: "BU22CSC1005"
        email:
          type: string
          format: email
          example: "muhammedabiodun42@gmail.com"
        full_name:
          type: string
          example: "Mohammed Abiodun"
        college:
          type: string
          enum: [COAES, COMSS, COLAW, COLBS, COHES, COCCS, COEVS]
          example: "COCCS"
        department:
          type: string
          example: "Computer Science"
        level:
          type: string
          enum: ["100", "200", "300", "400", "500"]
          example: "200"
        first_login:
          type: boolean
          example: false
        face_person_id:
          type: string
          nullable: true
          example: "azure-face-api-person-id"
        session_token:
          type: string
          nullable: true
        last_login:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    Admin:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
          example: "louisdiaz43@gmail.com"
        full_name:
          type: string
          example: "Louis Diaz"
        role:
          type: string
          enum: [admin, super_admin]
          example: "super_admin"
        session_token:
          type: string
          nullable: true
        last_login:
          type: string
          format: date-time

    VotingSession:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
          example: "Student Union Executive Elections 2024/2025"
        description:
          type: string
          example: "Annual elections for Student Union Government positions"
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        status:
          type: string
          enum: [upcoming, active, completed]
          example: "active"
        eligibility_criteria:
          type: object
          properties:
            colleges:
              type: array
              items:
                type: string
              example: ["COCCS", "COMSS", "COLAW"]
            departments:
              type: array
              items:
                type: string
              example: ["Computer Science", "Biology"]
            levels:
              type: array
              items:
                type: string
              example: ["100", "200", "300", "400"]
        location:
          type: object
          properties:
            type:
              type: string
              example: "Point"
            coordinates:
              type: array
              items:
                type: number
              example: [4.2811, 7.8525]
            name:
              type: string
              example: "Bowen University Campus"
            radius_meters:
              type: number
              example: 5000
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        face_person_group_id:
          type: string
          example: "session-uuid-person-group"
        total_votes:
          type: number
          example: 0
        results_published:
          type: boolean
          example: false
        created_by:
          type: string
        created_at:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        position:
          type: string
          example: "President"
        max_selections:
          type: number
          example: 1
        candidates:
          type: array
          items:
            $ref: "#/components/schemas/Candidate"

    Candidate:
      type: object
      properties:
        _id:
          type: string
        matric_no:
          type: string
          example: "BU22CSC1005"
        student_id:
          type: string
        manifesto:
          type: string
          example: "Building a united and progressive student community"
        votes:
          type: number
          example: 0

    Vote:
      type: object
      properties:
        _id:
          type: string
        student_id:
          type: string
        session_id:
          type: string
        choices:
          type: array
          items:
            type: object
            properties:
              position:
                type: string
              candidate_id:
                type: string
        verification:
          type: object
          properties:
            face_match:
              type: boolean
            confidence:
              type: number
            location_verified:
              type: boolean
            distance_from_center:
              type: number
        voted_at:
          type: string
          format: date-time

paths:
  # ==================== AUTHENTICATION ====================
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Student login
      description: |
        Login as a student using matric number and password.

        **First Login**: Returns `first_login` token if password hasn't been changed.
        **Regular Login**: Returns `student` token after password change.

        Default password for new students: `1234`
      operationId: studentLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - matric_no
                - password
              properties:
                matric_no:
                  type: string
                  example: "BU22CSC1005"
                password:
                  type: string
                  example: "1234"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful. Please change your password."
                  token:
                    type: string
                    description: JWT token (type depends on first_login status)
                  token_type:
                    type: string
                    enum: [first_login, student]
                    example: "first_login"
                  student:
                    $ref: "#/components/schemas/Student"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Rate limit exceeded (5 requests per 15 minutes)

  /auth/admin-login:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Login as an administrator using email and password
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "louisdiaz43@gmail.com"
                password:
                  type: string
                  example: "balikiss12"
      responses:
        "200":
          description: Admin login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Admin login successful"
                  token:
                    type: string
                  token_type:
                    type: string
                    example: "admin"
                  admin:
                    $ref: "#/components/schemas/Admin"
        "401":
          description: Invalid credentials
        "429":
          description: Rate limit exceeded

  /auth/change-password:
    patch:
      tags:
        - Authentication
      summary: Change password
      description: |
        Change student password. Can be used with either:
        - `first_login` token (first-time password change)
        - `student` token (regular password change)

        **Important**: Welcome email is sent after first password change.
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
              properties:
                new_password:
                  type: string
                  minLength: 6
                  example: "mySecurePassword123"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password changed successfully"
                  token:
                    type: string
                    description: New student token (if first login)
                  token_type:
                    type: string
                    example: "student"
        "400":
          description: Validation error
        "401":
          description: Unauthorized

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Student logout
      description: Logout current student and invalidate session token
      operationId: studentLogout
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: Unauthorized

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get student profile
      description: Get current authenticated student's profile information
      operationId: getProfile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  student:
                    $ref: "#/components/schemas/Student"
        "401":
          description: Unauthorized

  # ==================== ADMIN - STUDENTS ====================
  /admin/upload-students:
    post:
      tags:
        - Admin - Students
      summary: Upload students from CSV
      description: |
        Bulk upload students from CSV data. Creates student accounts with default password '1234'.
        Students must change password on first login.

        **Note**: Welcome emails are NOT sent during upload. They are sent after first password change.
      operationId: uploadStudents
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - csv_data
              properties:
                csv_data:
                  type: array
                  items:
                    type: object
                    required:
                      - matric_no
                      - email
                      - full_name
                      - college
                      - department
                      - level
                    properties:
                      matric_no:
                        type: string
                        example: "BU22CSC2001"
                      email:
                        type: string
                        format: email
                        example: "student2001@bowen.edu.ng"
                      full_name:
                        type: string
                        example: "John Doe"
                      college:
                        type: string
                        enum: [COAES, COMSS, COLAW, COLBS, COHES, COCCS, COEVS]
                        example: "COCCS"
                      department:
                        type: string
                        example: "Computer Science"
                      level:
                        type: string
                        enum: ["100", "200", "300", "400", "500"]
                        example: "200"
      responses:
        "201":
          description: Students uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Students uploaded successfully"
                  created:
                    type: number
                    example: 50
                  skipped:
                    type: number
                    example: 5
                  errors:
                    type: array
                    items:
                      type: object
        "400":
          description: Validation error
        "401":
          description: Unauthorized (admin only)

  /admin/students:
    get:
      tags:
        - Admin - Students
      summary: Get all students
      description: |
        Retrieve all students with optional filters and pagination.
        Supports filtering by college, department, level, and search query.
      operationId: getStudents
      security:
        - BearerAuth: []
      parameters:
        - name: college
          in: query
          schema:
            type: string
            enum: [COAES, COMSS, COLAW, COLBS, COHES, COCCS, COEVS]
          description: Filter by college
        - name: department
          in: query
          schema:
            type: string
          description: Filter by department
        - name: level
          in: query
          schema:
            type: string
            enum: ["100", "200", "300", "400", "500"]
          description: Filter by level
        - name: search
          in: query
          schema:
            type: string
          description: Search by name, email, or matric number
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Items per page
      responses:
        "200":
          description: Students retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  students:
                    type: array
                    items:
                      $ref: "#/components/schemas/Student"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      pages:
                        type: integer
                      limit:
                        type: integer
        "401":
          description: Unauthorized

  /admin/remove-department:
    delete:
      tags:
        - Admin - Students
      summary: Remove students by department
      description: Delete all students belonging to specified departments
      operationId: removeDepartment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - departments
              properties:
                departments:
                  type: array
                  items:
                    type: string
                  example: ["Computer Science", "Biology"]
      responses:
        "200":
          description: Students removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  deleted_count:
                    type: integer
        "401":
          description: Unauthorized

  # ==================== ADMIN - SESSIONS ====================
  /admin/create-session:
    post:
      tags:
        - Admin - Sessions
      summary: Create voting session
      description: |
        Create a new voting session with categories, candidates, eligibility criteria, and geofencing.

        **Important**: Creates Azure Face API PersonGroup for facial verification.
      operationId: createSession
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - start_time
                - end_time
                - categories
                - location
              properties:
                title:
                  type: string
                  example: "Student Union Executive Elections 2024/2025"
                description:
                  type: string
                  example: "Annual elections for Student Union Government positions"
                start_time:
                  type: string
                  format: date-time
                  example: "2025-10-28T08:00:00Z"
                end_time:
                  type: string
                  format: date-time
                  example: "2025-10-28T18:00:00Z"
                eligibility_criteria:
                  type: object
                  properties:
                    colleges:
                      type: array
                      items:
                        type: string
                      example: ["COCCS", "COMSS", "COLAW"]
                    departments:
                      type: array
                      items:
                        type: string
                      example: ["Computer Science"]
                    levels:
                      type: array
                      items:
                        type: string
                      example: ["100", "200", "300", "400"]
                location:
                  type: object
                  required:
                    - coordinates
                    - name
                    - radius_meters
                  properties:
                    type:
                      type: string
                      default: "Point"
                    coordinates:
                      type: array
                      items:
                        type: number
                      example: [4.2811, 7.8525]
                      description: "[longitude, latitude]"
                    name:
                      type: string
                      example: "Bowen University Campus"
                    radius_meters:
                      type: number
                      example: 5000
                categories:
                  type: array
                  items:
                    type: object
                    required:
                      - position
                      - max_selections
                    properties:
                      position:
                        type: string
                        example: "President"
                      max_selections:
                        type: number
                        example: 1
                      candidates:
                        type: array
                        items:
                          type: object
                          required:
                            - matric_no
                          properties:
                            matric_no:
                              type: string
                              example: "BU22CSC1005"
                            manifesto:
                              type: string
                              example: "Building a united student community"
      responses:
        "201":
          description: Session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  session:
                    $ref: "#/components/schemas/VotingSession"
        "400":
          description: Validation error
        "401":
          description: Unauthorized

  /admin/sessions:
    get:
      tags:
        - Admin - Sessions
      summary: Get all sessions
      description: Retrieve all voting sessions with optional status filter and pagination
      operationId: getSessions
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [upcoming, active, completed]
          description: Filter by session status
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  sessions:
                    type: array
                    items:
                      $ref: "#/components/schemas/VotingSession"
                  pagination:
                    type: object

  /admin/update-session/{id}:
    patch:
      tags:
        - Admin - Sessions
      summary: Update voting session
      description: |
        Update session details, categories, or candidates.
        **Note**: Cannot update session once voting has started.
      operationId: updateSession
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
                categories:
                  type: array
                  items:
                    type: object
      responses:
        "200":
          description: Session updated successfully
        "400":
          description: Cannot update active session
        "401":
          description: Unauthorized
        "404":
          description: Session not found

  /admin/delete-session/{id}:
    delete:
      tags:
        - Admin - Sessions
      summary: Delete voting session
      description: |
        Delete a voting session and all associated votes.
        **Note**: Cannot delete active sessions.
      operationId: deleteSession
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Session deleted successfully
        "400":
          description: Cannot delete active session
        "401":
          description: Unauthorized
        "404":
          description: Session not found

  /admin/session-stats/{id}:
    get:
      tags:
        - Admin - Sessions
      summary: Get session statistics
      description: |
        Retrieve detailed statistics for a voting session including:
        - Total eligible students
        - Participation rate
        - Votes by category
        - Breakdown by college, department, and level
      operationId: getSessionStats
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        "200":
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  stats:
                    type: object
                    properties:
                      session_id:
                        type: string
                      title:
                        type: string
                      total_eligible:
                        type: integer
                      total_voted:
                        type: integer
                      participation_rate:
                        type: number
                        example: 75.5
                      votes_by_category:
                        type: array
                      votes_by_college:
                        type: object
                      votes_by_department:
                        type: object
                      votes_by_level:
                        type: object
        "401":
          description: Unauthorized
        "404":
          description: Session not found

  # ==================== ADMIN - SYSTEM ====================
  /admin/create-admin:
    post:
      tags:
        - Admin - System
      summary: Create admin user
      description: |
        Create a new admin user. **Super admin privileges required.**
        Can create both regular admins and super admins.
      operationId: createAdmin
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
              properties:
                email:
                  type: string
                  format: email
                  example: "newadmin@bowen.edu.ng"
                password:
                  type: string
                  minLength: 8
                  example: "SecureAdmin123!"
                full_name:
                  type: string
                  example: "New Admin User"
                role:
                  type: string
                  enum: [admin, super_admin]
                  default: admin
                  example: "admin"
      responses:
        "201":
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  admin:
                    $ref: "#/components/schemas/Admin"
        "400":
          description: Validation error
        "401":
          description: Unauthorized
        "403":
          description: Super admin privileges required

  /admin/cleanup-all:
    delete:
      tags:
        - Admin - System
      summary: Cleanup all data
      description: |
        Delete all voting sessions, votes, and candidates from the system.
        **Super admin privileges required. Use with extreme caution!**
      operationId: cleanupAll
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  deleted:
                    type: object
                    properties:
                      sessions:
                        type: integer
                      votes:
                        type: integer
                      candidates:
                        type: integer
        "401":
          description: Unauthorized
        "403":
          description: Super admin privileges required

  # ==================== STUDENT - SESSIONS ====================
  /sessions:
    get:
      tags:
        - Student - Sessions
      summary: List eligible sessions
      description: |
        Get all voting sessions that the authenticated student is eligible for
        based on their college, department, and level.
      operationId: listEligibleSessions
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [upcoming, active, completed]
          description: Filter by session status
      responses:
        "200":
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  sessions:
                    type: array
                    items:
                      $ref: "#/components/schemas/VotingSession"
        "401":
          description: Unauthorized

  /sessions/{id}:
    get:
      tags:
        - Student - Sessions
      summary: Get session details
      description: Get detailed information about a specific voting session
      operationId: getSession
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        "200":
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  session:
                    $ref: "#/components/schemas/VotingSession"
                  has_voted:
                    type: boolean
                    example: false
        "401":
          description: Unauthorized
        "404":
          description: Session not found

  # ==================== STUDENT - VOTING ====================
  /vote:
    post:
      tags:
        - Student - Voting
      summary: Submit vote
      description: |
        Submit a vote with facial verification and geofencing validation.

        ## Verification Steps:
        1. ‚úÖ Session is active
        2. ‚úÖ Student is eligible (college/department/level match)
        3. ‚úÖ Student hasn't voted yet
        4. ‚úÖ Student is within campus radius (5000m from center)
        5. ‚úÖ Face matches enrolled photo (Azure Face API - 70% confidence minimum)

        **Success**: Sends vote confirmation email
      operationId: submitVote
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
                - choices
                - image_url
                - lat
                - lng
              properties:
                session_id:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                choices:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - position
                      - candidate_id
                    properties:
                      position:
                        type: string
                        example: "President"
                      candidate_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
                  example:
                    - position: "President"
                      candidate_id: "507f1f77bcf86cd799439012"
                    - position: "Vice President"
                      candidate_id: "507f1f77bcf86cd799439013"
                image_url:
                  type: string
                  format: uri
                  example: "https://example.com/student-face.jpg"
                  description: "URL to student's face photo for verification"
                lat:
                  type: number
                  minimum: -90
                  maximum: 90
                  example: 7.8525
                  description: "Student's current latitude"
                lng:
                  type: number
                  minimum: -180
                  maximum: 180
                  example: 4.2811
                  description: "Student's current longitude"
      responses:
        "201":
          description: Vote submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Vote submitted successfully"
                  vote:
                    $ref: "#/components/schemas/Vote"
        "400":
          description: Validation error or voting not allowed
        "401":
          description: Unauthorized
        "403":
          description: Face verification failed or geofencing failed
        "429":
          description: Rate limit exceeded

  /vote/history:
    get:
      tags:
        - Student - Voting
      summary: Get voting history
      description: Get authenticated student's complete voting history across all sessions
      operationId: getVotingHistory
      security:
        - BearerAuth: []
      responses:
        "200":
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  votes:
                    type: array
                    items:
                      type: object
                      properties:
                        session_id:
                          type: string
                        session_title:
                          type: string
                        voted_at:
                          type: string
                          format: date-time
                        verification_status:
                          type: object
        "401":
          description: Unauthorized

  # ==================== RESULTS ====================
  /results/{session_id}:
    get:
      tags:
        - Results
      summary: Get session results
      description: |
        Get published results for a voting session.
        **Note**: Results are only visible after admin publishes them.
      operationId: getResults
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        "200":
          description: Results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  session:
                    type: object
                    properties:
                      title:
                        type: string
                      total_votes:
                        type: integer
                      published_at:
                        type: string
                        format: date-time
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        position:
                          type: string
                        total_votes:
                          type: integer
                        candidates:
                          type: array
                          items:
                            type: object
                            properties:
                              matric_no:
                                type: string
                              full_name:
                                type: string
                              votes:
                                type: integer
                              percentage:
                                type: number
                              is_winner:
                                type: boolean
        "401":
          description: Unauthorized
        "403":
          description: Results not yet published
        "404":
          description: Session not found

  /results/{session_id}/publish:
    post:
      tags:
        - Results
      summary: Publish results
      description: |
        Publish election results for a completed voting session.
        **Admin only**. Sends result announcement emails to all participants.
      operationId: publishResults
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        "200":
          description: Results published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  results:
                    type: object
        "400":
          description: Session not completed yet
        "401":
          description: Unauthorized (admin only)
        "404":
          description: Session not found

  /results/stats/overview:
    get:
      tags:
        - Results
      summary: Get overall statistics
      description: |
        Get comprehensive system-wide statistics. **Admin only**.
        Includes total students, sessions, votes, participation rates, and trends.
      operationId: getOverallStats
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  stats:
                    type: object
                    properties:
                      total_students:
                        type: integer
                      total_sessions:
                        type: integer
                      total_votes:
                        type: integer
                      active_sessions:
                        type: integer
                      overall_participation_rate:
                        type: number
                      students_by_college:
                        type: object
                      students_by_level:
                        type: object
                      recent_activity:
                        type: array
        "401":
          description: Unauthorized (admin only)
